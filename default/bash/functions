# Compression
compress() { tar -czf "${1%/}.tar.gz" "${1%/}"; }
alias decompress="tar -xzf"

# Write iso file to sd card
iso2sd() {
  if [ $# -ne 2 ]; then
    echo "Usage: iso2sd <input_file> <output_device>"
    echo "Example: iso2sd ~/Downloads/ubuntu-25.04-desktop-amd64.iso /dev/sda"
    echo -e "\nAvailable SD cards:"
    lsblk -d -o NAME | grep -E '^sd[a-z]' | awk '{print "/dev/"$1}'
  else
    sudo dd bs=4M status=progress oflag=sync if="$1" of="$2"
    sudo eject $2
  fi
}

# Format an entire drive for a single partition using ext4
format-drive() {
  if [ $# -ne 2 ]; then
    echo "Usage: format-drive <device> <name>"
    echo "Example: format-drive /dev/sda 'My Stuff'"
    echo -e "\nAvailable drives:"
    lsblk -d -o NAME -n | awk '{print "/dev/"$1}'
  else
    echo "WARNING: This will completely erase all data on $1 and label it '$2'."
    read -rp "Are you sure you want to continue? (y/N): " confirm
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
      sudo wipefs -a "$1"
      sudo dd if=/dev/zero of="$1" bs=1M count=100 status=progress
      sudo parted -s "$1" mklabel gpt
      sudo parted -s "$1" mkpart primary ext4 1MiB 100%
      sudo mkfs.ext4 -L "$2" "$([[ $1 == *"nvme"* ]] && echo "${1}p1" || echo "${1}1")"
      sudo chmod -R 777 "/run/media/$USER/$2"
      echo "Drive $1 formatted and labeled '$2'."
    fi
  fi
}

# Transcode a video to a good-balance 1080p that's great for sharing online
transcode-video-1080p() {
  ffmpeg -i $1 -vf scale=1920:1080 -c:v libx264 -preset fast -crf 23 -c:a copy ${1%.*}-1080p.mp4
}

# Transcode a video to a good-balance 4K that's great for sharing online
transcode-video-4K() {
  ffmpeg -i $1 -c:v libx265 -preset slow -crf 24 -c:a aac -b:a 192k ${1%.*}-optimized.mp4
}

# Transcode any image to JPG image that's great for shrinking wallpapers
img2jpg() {
  magick $1 -quality 95 -strip ${1%.*}.jpg
}

# Ensure changes to ~/.XCompose are immediately available
refresh-xcompose() {
  pkill fcitx5
  uwsm app -- fcitx5 >/dev/null 2>&1 &
}

#start running db tunnels
gcloud-db-tunnels() {
  local config_file="$HOME/.config/gcloud-db-tunnels"
  local tunnel_count=0
  local pids=() # Array to store PIDs of background tunnels

  # Check if the configuration file exists
  if [[ ! -f "$config_file" ]]; then
      echo "Error: Configuration file not found at '$config_file'." >&2
      echo "Please create it and add your tunnel configurations." >&2
      echo "each line in the file should look like this: <user> <compute-instance-name> <local-port> <instance-db-host> <instance-db-port>" >&2
      return 1
  fi

  echo "Attempting to start gcloud database tunnels from '$config_file'..."

  # Read the configuration file line by line
  while IFS= read -r line || [[ -n "$line" ]]; do
      # Skip empty lines and lines starting with '#' (comments)
      if [[ -z "$line" || "${line#"${line%%[![:space:]]*}"}" =~ ^# ]]; then
          continue
      fi
      # Parse the line into individual components
      read -r -a args <<< "$line"
      # Validate the number of arguments
      if [[ "${#args[@]}" -ne 5 ]]; then
          echo "Error: Incorrect format in config file line: '$line'" >&2
          echo "Expected 5 arguments: <user> <instance-name> <local-port> <db-host> <db-port>" >&2
          return 1
      fi
      local user="${args[0]}"
      local instance_name="${args[1]}"
      local local_port="${args[2]}"
      local instance_db_host="${args[3]}"
      local instance_db_port="${args[4]}"
      echo "Creating tmux pane and starting tunnel for ${user}@${instance_name} (local:${local_port} -> ${instance_db_host}:${instance_db_port})..."
      # Construct the gcloud command string
      local gcloud_command="gcloud compute ssh ${user}@${instance_name} -- -N -L ${local_port}:${instance_db_host}:${instance_db_port}"
      # Create a new tmux pane and send the command to it
      # 'tmux split-window -h' creates a new horizontal pane
      # 'tmux send-keys' sends the command string and then 'C-m' (Enter) to execute it
      tmux split-window -h
      tmux send-keys "$gcloud_command" C-m
      tunnel_count=$((tunnel_count + 1))
  done < "$config_file"

  if [[ "$tunnel_count" -eq 0 ]]; then
    echo "No valid tunnel configurations found in '$config_file'."
    return 0
  else
    echo "Successfully started $tunnel_count tunnel(s) in new tmux panes."
    echo "You may need to switch between panes (e.g., Ctrl+b ; or Ctrl+b <arrow keys>) to see them."
  fi
}
